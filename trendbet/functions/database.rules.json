{
  "rules": {
    "users": {
      "$uid": {
        ".read": "auth.uid === $uid",
        ".write": "auth.uid === $uid",
        "balance": {
          ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 1000000"
        },
        "lockedBalance": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "totalWagered": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "totalWon": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "bets": {
      "$betId": {
        ".read": "auth.uid === data.child('userId').val()",
        ".write": "auth.uid === data.child('userId').val() && !data.exists()",
        ".validate": "
          newData.hasChildren(['userId', 'marketId', 'outcome', 'amount', 'odds', 'status', 'placedAt']) &&
          newData.child('userId').val() === auth.uid &&
          newData.child('amount').val() >= 100 &&
          newData.child('amount').val() <= 100000 &&
          newData.child('odds').val() >= 1.01 &&
          newData.child('status').val() === 'pending' &&
          root.child('markets').child(newData.child('marketId').val()).child('status').val() === 'open'
        "
      }
    },
    "markets": {
      "$marketId": {
        ".read": true,
        ".write": "root.child('admins').child(auth.uid).val() === true",
        "pool": {
          ".write": "auth != null",
          ".validate": "newData.hasChildren(['YES', 'NO'])"
        }
      }
    },
    "admins": {
      ".read": "root.child('admins').child(auth.uid).val() === true",
      ".write": "root.child('admins').child(auth.uid).val() === true"
    }
  }
}
